# Workflow to deploy Salesforce changes
# Description: This workflow deploys validated changes to the specified Salesforce environment

name: Deployment

on:
  # Trigger the workflow manually
  workflow_dispatch:

permissions:
  contents: write

jobs:
  check_environment:
    runs-on: ubuntu-latest
    outputs:
      environment_exists: ${{ steps.check_env.outputs.environment_exists }}
    steps:
      - id: check_env
        run: |
          # Using GitHub CLI to check if environment exists
          if gh api repos/${{ github.repository }}/environments/${{ github.ref_name }} &>/dev/null; then
            echo "environment_exists=true" >> $GITHUB_OUTPUT
          else
            echo "environment_exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    needs: check_environment
    if: needs.check_environment.outputs.environment_exists == 'true'
    name: Deploy
    environment: ${{ github.ref_name }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: Install Salesforce CLI
        run: |
          npm install @salesforce/cli --global

      - name: Create JWT Key File
        run: |
          echo "${{ secrets.JWT_KEY_FILE }}" > server.key

      - name: Create Required Directories and Remove Previous Summmary
        run: |
          mkdir -p deployment
          rm -f deployment/DeploymentSummary.txt

      - name: Authenticate with Salesforce
        run: |
          sf org login jwt \
            --username ${{ vars.USERNAME }} \
            --jwt-key-file server.key \
            --client-id ${{ secrets.CONSUMER_KEY }}

      - name: Check Validation Summary
        id: check_validation
        run: |
          # Check if ValidationSummary.txt exists
          if [ ! -f "deployment/ValidationSummary.txt" ]; then
            echo "ValidationSummary.txt not found, skipping step"
            exit 0
          fi

          # Read the file content
          content=$(cat deployment/ValidationSummary.txt)

          # Check for success status
          if ! echo "$content" | grep -q "Status: Succeeded"; then
            echo "Validation status is not Succeeded"
            exit 0
          fi

          # Check for deploy command
          if ! echo "$content" | grep -qE "Deploy: sf project deploy quick --job-id [A-Za-z0-9]+"; then
            echo "Deploy command not found or doesn't match expected value"
            exit 0
          fi

          # Extract validation completion date and compare with current date
          validation_date=$(echo "$content" | grep "Validation completed at:" | cut -d':' -f2- | xargs)
          validation_timestamp=$(date -d "$validation_date" +%s)
          current_timestamp=$(date +%s)
          days_diff=$(( ($current_timestamp - $validation_timestamp) / 86400 ))

          # Check if validation is older than 9 days (we may change it to 1 day as this is the limit {NS})
          if [ $days_diff -ge 9 ]; then
            echo "Validation is older than 9 days"
            exit 0
          fi

          # If all checks pass, store the deploy command and set boolean flag
          deploy_command=$(echo "$content" | grep "Deploy: " | cut -d':' -f2- | xargs)
          echo "DEPLOY_COMMAND=$deploy_command" >> $GITHUB_ENV
          echo "HAS_DEPLOY_COMMAND=$([[ -n "$deploy_command" ]] && echo "true" || echo "false")" >> $GITHUB_ENV

      - name: Run Quick Deploy
        if: env.HAS_DEPLOY_COMMAND == 'true'
        run: |
          echo "Running quick deploy command..."
          ${{ env.DEPLOY_COMMAND }} -o ${{ vars.USERNAME }} > >(tee deployment/DeploymentSummary.txt) 2>&1

        # run if the JobId has expires already
      - name: Get Test Classes
        if: env.HAS_DEPLOY_COMMAND != 'true'
        run: |
          if [ -d "force-app/main/default/classes" ]; then
            TEST_CLASSES=$(find force-app/main/default/classes -type f \( -name "*Test.cls" -o -name "*test.cls" \) -exec basename {} .cls \; | tr '\n' ' ')
            if [ -z "$TEST_CLASSES" ]; then
              echo "No test classes found"
              echo "TEST_CLASSES=NoTestClasses" >> $GITHUB_ENV
            else
              echo "TEST_CLASSES=${TEST_CLASSES}" >> $GITHUB_ENV
              echo "Found test classes: ${TEST_CLASSES}"
            fi
          else
            echo "Classes directory not found"
            echo "TEST_CLASSES=NoTestClasses" >> $GITHUB_ENV
          fi

      - name: Run Deployment
        if: env.HAS_DEPLOY_COMMAND != 'true'
        continue-on-error: true
        run: |
          if [ ! -f "manifest/package.xml" ]; then
            echo "Error: package.xml not found in manifest directory"
            echo "Error: package.xml not found in manifest directory" > deployment/DeploymentSummary.txt
            exit 1
          fi

          if [ "${{ env.TEST_CLASSES }}" = "NoTestClasses" ]; then
            echo "Executing command: sf project deploy start -o ${{ vars.USERNAME }} -x manifest/package.xml -l NoTestRun"
            sf project deploy start -o ${{ vars.USERNAME }} -x manifest/package.xml -l NoTestRun > >(tee deployment/DeploymentSummary.txt) 2>&1
          else
            echo "Executing command: sf project deploy start -o ${{ vars.USERNAME }} -x manifest/package.xml -l RunSpecifiedTests -t ${{ env.TEST_CLASSES }}"
            sf project deploy start -o ${{ vars.USERNAME }} -x manifest/package.xml -l RunSpecifiedTests -t ${{ env.TEST_CLASSES }} > >(tee deployment/DeploymentSummary.txt) 2>&1
          fi

      - name: Add Timestamp and Quick Deploy to Deployment Summary
        if: always()
        run: |
          if [ -f "deployment/DeploymentSummary.txt" ]; then
            echo -e "\n----------------------------------------" >> deployment/DeploymentSummary.txt
            echo "Deployment completed at: $(date)" >> deployment/DeploymentSummary.txt
            echo "Branch: ${{ github.ref_name }}" >> deployment/DeploymentSummary.txt
          fi

      - name: Commit Deployment Summary
        if: always()
        run: |
          if [ -f "deployment/DeploymentSummary.txt" ]; then
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            git add deployment/DeploymentSummary.txt
            git commit -m "Add deployment results [skip ci]" || echo "No changes to commit"
            git push https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:${{ github.ref }} || echo "Failed to push changes"
          fi
